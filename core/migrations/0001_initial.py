# Generated by Django 5.0.3 on 2024-03-31 13:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import django_countries.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Hackathon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        blank=True,
                        help_text="Short name for the hackathon e.g. HTV",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full name of the hackathon e.g. Hack the Valley",
                        max_length=255,
                    ),
                ),
                ("website", models.URLField()),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("application_start", models.DateTimeField(blank=True, null=True)),
                ("application_deadline", models.DateTimeField(blank=True, null=True)),
                ("reimbursements", models.CharField(max_length=255)),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=3, null=True
                    ),
                ),
                (
                    "min_age",
                    models.SmallIntegerField(
                        blank=True,
                        default=0,
                        help_text="Minimum age to participate, set to 0 if there is no minimum age and don't set if unknown",
                        null=True,
                    ),
                ),
                (
                    "minimum_education_level",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Middle School"),
                            (1, "High School"),
                            (2, "University/College"),
                            (3, "Graduated University/College"),
                            (4, "Other"),
                            (5, "Any/All"),
                        ],
                        help_text="Minimum education level required to participate, set to Any/All if there is no minimum education level and don't set if unknown",
                        null=True,
                    ),
                ),
                (
                    "maximum_education_level",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "Middle School"),
                            (1, "High School"),
                            (2, "University/College"),
                            (3, "Graduated University/College"),
                            (4, "Other"),
                            (5, "Any/All"),
                        ],
                        help_text="Maximum education level required to participate, set to Any/All if there is no maximum education level and don't set if unknown",
                        null=True,
                    ),
                ),
                (
                    "numerical_prize_pool",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "prize_pool_items",
                    models.TextField(
                        blank=True,
                        help_text="List of items in the prize pool",
                        null=True,
                    ),
                ),
                ("image", models.ImageField(upload_to="hackathon_images")),
                ("notes", models.TextField(blank=True, default="")),
            ],
            options={
                "ordering": ["start_date"],
            },
        ),
        migrations.CreateModel(
            name="Hacker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Country you live in",
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="City you live in",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "school",
                    models.CharField(
                        blank=True,
                        help_text="Name of your school or university",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "education",
                    models.CharField(
                        blank=True,
                        choices=[
                            (0, "Middle School"),
                            (1, "High School"),
                            (2, "University/College"),
                            (3, "Graduated University/College"),
                            (4, "Other"),
                        ],
                        help_text="Your current education level e.g. High School, University, etc.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="hackathon",
            constraint=models.CheckConstraint(
                check=models.Q(("start_date__lt", models.F("end_date"))),
                name="start_date_lt_end_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="hackathon",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("application_start__lt", models.F("application_deadline"))
                ),
                name="application_start_lt_application_deadline",
            ),
        ),
        migrations.AddConstraint(
            model_name="hackathon",
            constraint=models.CheckConstraint(
                check=models.Q(("application_deadline__lt", models.F("start_date"))),
                name="application_deadline_lt_start_date",
            ),
        ),
    ]
